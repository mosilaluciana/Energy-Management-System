// import React from 'react';// import validate from "./validators/person-validators";// import Button from "react-bootstrap/Button";// import * as API_USERS from "../api/person-api";// import APIResponseErrorMessage from "../../commons/errorhandling/api-response-error-message";// import {Col, Row} from "reactstrap";// import { FormGroup, Input, Label} from 'reactstrap';//// class PersonForm extends React.Component {//     constructor(props) {//         super(props);//         this.toggleForm = this.toggleForm.bind(this);//         this.reloadHandler = this.props.reloadHandler;////         this.state = {//             errorStatus: 0,//             error: null,//             formIsValid: false,//             formControls: {//                 name: {//                     value: '',//                     placeholder: 'What is your name?...',//                     valid: false,//                     touched: false,//                     validationRules: {//                         minLength: 3,//                         isRequired: true//                     }//                 },//                 address: {//                     value: '',//                     placeholder: 'Email...',//                     valid: false,//                     touched: false,//                     validationRules: {//                         emailValidator: true//                     }//                 },//                 age: {//                     value: '',//                     placeholder: 'Age...',//                     valid: false,//                     touched: false,//                 },//                 password: {//                     value: '',//                     placeholder: 'Password...',//                     valid: false,//                     touched: false,//                     validationRules: {//                         minLength: 6, // Minimum length for password//                         isRequired: true//                     }//                 },//                 role: {//                     value: "USER", // Default role as USER//                     valid: true, // No validation needed for checkbox//                     touched: false,//                 }//             }//         };////         this.handleChange = this.handleChange.bind(this);//         this.handleSubmit = this.handleSubmit.bind(this);//     }////     toggleForm() {//         this.setState({collapseForm: !this.state.collapseForm});//     }////     handleChange = event => {//         const name = event.target.name;//        // const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value; // Handle checkbox separately//         const value = event.target.type === 'checkbox'//             ? event.target.checked ? "USER" : "ADMIN" // Map checkbox state to "USER"/"ADMIN"//             : event.target.value;////         const updatedControls = {...this.state.formControls};//         const updatedFormElement = updatedControls[name];////         updatedFormElement.value = value;//         updatedFormElement.touched = true;//         updatedFormElement.valid = validate(value, updatedFormElement.validationRules);//         updatedControls[name] = updatedFormElement;////         let formIsValid = true;//         for (let updatedFormElementName in updatedControls) {//             formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;//         }////         this.setState({//             formControls: updatedControls,//             formIsValid: formIsValid,//             errorStatus: 0, // Reset error status on change//             error: null // Reset error message on change//         });//     };////     registerPerson(person) {//         return API_USERS.postPerson(person, (result, status, error) => {//             if (result !== null && (status === 200 || status === 201)) {//                 console.log("Successfully inserted person with id: " + result);//                 this.reloadHandler();//             } else {//                 // Log error for debugging//                 console.error("API Error: ", error);//                 this.setState({//                     errorStatus: status,//                     error: status === 409 ? "The address already exists!" : error || "An unexpected error occurred."//                 });//             }//         });//     }////     handleSubmit() {//         let person = {//             name: this.state.formControls.name.value,//             age: this.state.formControls.age.value,//             address: this.state.formControls.address.value,//             password: this.state.formControls.password.value,//             role: this.state.formControls.role.value//         };////         console.log("Submitting person:", person);//         this.registerPerson(person);//     }////     render() {//         return (//             <div>//                 <FormGroup id='name'>//                     <Label for='nameField'> Name: </Label>//                     <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}//                            onChange={this.handleChange}//                            value={this.state.formControls.name.value}//                            valid={this.state.formControls.name.valid}//                            required//                     />//                     {this.state.formControls.name.touched && !this.state.formControls.name.valid &&//                         <div className={"error-message row"}> * Name must have at least 3 characters </div>}//                 </FormGroup>////                 <FormGroup id='address'>//                     <Label for='addressField'> Email-Address: </Label>//                     <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}//                            onChange={this.handleChange}//                            value={this.state.formControls.address.value}//                            valid={this.state.formControls.address.valid}//                            required//                     />//                     {this.state.formControls.address.touched && !this.state.formControls.address.valid &&//                         <div className={"error-message"}> * Email must have a valid format</div>}//                 </FormGroup>////                 <FormGroup id='age'>//                     <Label for='ageField'> Age: </Label>//                     <Input name='age' id='ageField' placeholder={this.state.formControls.age.placeholder}//                            min={0} max={100} type="number"//                            onChange={this.handleChange}//                            value={this.state.formControls.age.value}//                            valid={this.state.formControls.age.valid}//                            required//                     />//                 </FormGroup>////                 <FormGroup id='password'>//                     <Label for='passwordField'> Password: </Label>//                     <Input type="password" name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}//                            onChange={this.handleChange}//                            value={this.state.formControls.password.value}//                            valid={this.state.formControls.password.valid}//                            required//                     />//                     {this.state.formControls.password.touched && !this.state.formControls.password.valid &&//                         <div className={"error-message"}> * Password must have at least 6 characters </div>}//                 </FormGroup>////                 <FormGroup id='role'>//                     <Label for='roleField'>//                         <Input type="checkbox" name='role' id='roleField'//                                onChange={this.handleChange}//                                checked={this.state.formControls.role.value === "ADMIN"} />//                         Admin Role(Select for Admin)//                     </Label>//                 </FormGroup>//                 <Row>//                     <Col sm={{size: '4', offset: 8}}>//                         <Button type={"submit"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>//                     </Col>//                 </Row>////                 {/* Display specific error message for duplicate address */}//                 {this.state.errorStatus === 409 && this.state.error && (//                     <div className="error-message" style={{color: "red", marginTop: "10px"}}>//                         {this.state.error}//                     </div>//                 )}////                 {/* Display general error message for other cases */}//                 {this.state.errorStatus > 0 && this.state.errorStatus !== 409 && (//                     <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />//                 )}//             </div>//         );//     }// }//// export default PersonForm;import React from 'react';import validate from "./validators/person-validators";import Button from "react-bootstrap/Button";import * as API_USERS from "../api/person-api";import APIResponseErrorMessage from "../../commons/errorhandling/api-response-error-message";import { Col, Row } from "reactstrap";import { FormGroup, Input, Label } from 'reactstrap';class PersonForm extends React.Component {    constructor(props) {        super(props);        this.toggleForm = this.toggleForm.bind(this);        this.reloadHandler = this.props.reloadHandler;        this.state = {            errorStatus: 0,            error: null,            formIsValid: false,            formControls: {                name: {                    value: '',                    placeholder: 'What is your name?...',                    valid: false,                    touched: false,                    validationRules: {                        minLength: 3,                        isRequired: true                    }                },                address: {                    value: '',                    placeholder: 'Email...',                    valid: false,                    touched: false,                    validationRules: {                        emailValidator: true                    }                },                age: {                    value: '',                    placeholder: 'Age...',                    valid: false,                    touched: false,                },                password: {                    value: '',                    placeholder: 'Password...',                    valid: false,                    touched: false,                    validationRules: {                        minLength: 6, // Minimum length for password                        isRequired: true                    }                },                role: {                    value: "USER", // Default role as USER                    valid: true, // No validation needed for checkbox                    touched: false,                }            }        };        this.handleChange = this.handleChange.bind(this);        this.handleSubmit = this.handleSubmit.bind(this);    }    toggleForm() {        this.setState({ collapseForm: !this.state.collapseForm });    }    handleChange = event => {        const name = event.target.name;        let value;        if (event.target.type === "checkbox") {            // Toggle between "USER" and "ADMIN" for checkbox            value = this.state.formControls.role.value === "USER" ? "ADMIN" : "USER";        } else {            value = event.target.value;        }        const updatedControls = { ...this.state.formControls };        const updatedFormElement = updatedControls[name];        updatedFormElement.value = value;        updatedFormElement.touched = true;        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);        updatedControls[name] = updatedFormElement;        let formIsValid = true;        for (let updatedFormElementName in updatedControls) {            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;        }        this.setState({            formControls: updatedControls,            formIsValid: formIsValid,            errorStatus: 0,            error: null        });    };    registerPerson(person) {        return API_USERS.postPerson(person, (result, status, error) => {            if (result !== null && (status === 200 || status === 201)) {                console.log("Successfully inserted person with id: " + result);                this.reloadHandler();            } else {                // Log error for debugging                console.error("API Error: ", error);                this.setState({                    errorStatus: status,                    error: status === 409 ? "The address already exists!" : error || "An unexpected error occurred."                });            }        });    }    handleSubmit() {        let person = {            name: this.state.formControls.name.value,            age: this.state.formControls.age.value,            address: this.state.formControls.address.value,            password: this.state.formControls.password.value,            roles: [{ name: this.state.formControls.role.value }] // Trimite lista de roluri        };        console.log("Submitting person:", person);        this.registerPerson(person);    }    render() {        return (            <div>                <FormGroup id='name'>                    <Label for='nameField'> Name: </Label>                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}                           onChange={this.handleChange}                           value={this.state.formControls.name.value}                           valid={this.state.formControls.name.valid}                           required                    />                    {this.state.formControls.name.touched && !this.state.formControls.name.valid &&                        <div className={"error-message row"}> * Name must have at least 3 characters </div>}                </FormGroup>                <FormGroup id='address'>                    <Label for='addressField'> Email-Address: </Label>                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}                           onChange={this.handleChange}                           value={this.state.formControls.address.value}                           valid={this.state.formControls.address.valid}                           required                    />                    {this.state.formControls.address.touched && !this.state.formControls.address.valid &&                        <div className={"error-message"}> * Email must have a valid format</div>}                </FormGroup>                <FormGroup id='age'>                    <Label for='ageField'> Age: </Label>                    <Input name='age' id='ageField' placeholder={this.state.formControls.age.placeholder}                           min={0} max={100} type="number"                           onChange={this.handleChange}                           value={this.state.formControls.age.value}                           valid={this.state.formControls.age.valid}                           required                    />                </FormGroup>                <FormGroup id='password'>                    <Label for='passwordField'> Password: </Label>                    <Input type="password" name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}                           onChange={this.handleChange}                           value={this.state.formControls.password.value}                           valid={this.state.formControls.password.valid}                           required                    />                    {this.state.formControls.password.touched && !this.state.formControls.password.valid &&                        <div className={"error-message"}> * Password must have at least 6 characters </div>}                </FormGroup>                <FormGroup id='role'>                    <Label for='roleField'>                        <Input type="checkbox" name='role' id='roleField'                               onChange={this.handleChange}                               checked={this.state.formControls.role.value === "ADMIN"} />                        Admin Role (Select for Admin)                    </Label>                </FormGroup>                <Row>                    <Col sm={{ size: '4', offset: 8 }}>                        <Button type={"submit"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}> Submit </Button>                    </Col>                </Row>                {/* Display specific error message for duplicate address */}                {this.state.errorStatus === 409 && this.state.error && (                    <div className="error-message" style={{ color: "red", marginTop: "10px" }}>                        {this.state.error}                    </div>                )}                {/* Display general error message for other cases */}                {this.state.errorStatus > 0 && this.state.errorStatus !== 409 && (                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />                )}            </div>        );    }}export default PersonForm;